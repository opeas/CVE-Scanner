import requests
from bs4 import BeautifulSoup
import datetime

# Date formatting compliant only with Unix
today = datetime.date.today()
yesterday = today - datetime.timedelta(days=1)

yesterday_date = yesterday.strftime("%Y-%m-%d") # Date in the format "2024-12-30" | "2024-01-01"
today_date = today.strftime("%Y-%m-%d") # Date in the format "2024-12-30" | "2024-01-01"

# We are using the Google Chrome (Windows 10) User-Agent for our header, but we can use any of the ones listed below
headers = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 12_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.6 Safari/605.1.15'
}
# Mozilla Firefox (Windows 10): 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:115.0) Gecko/20100101 Firefox/115.0'
# Microsoft Edge (Windows 10): 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36 Edg/115.0.1901.203'
# Safari (macOS): 'Mozilla/5.0 (Macintosh; Intel Mac OS X 12_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.6 Safari/605.1.15'

# An additional function to save the dates of the last found vulnerabilities so that the script does not repeat already found vulnerabilities. If you do not want to use it, remove ‘increase_counter()’ from the ‘find_vulnerability_cvedetailscom’ function and get rid of ‘if check_last_tags(div_text)':
def check_last_tags(tag):
    try:
        with open(tag_file_path, 'r+') as f:
            lines = f.read().splitlines()
            if not lines:
                return None
            
            if counter < len(lines):
                if tag != lines[counter]:
                    lines[counter] = tag
                    f.seek(0)
                    f.write("\n".join(lines))
                    f.truncate()
                    return True
                else:
                    return False
            else:
                lines.append(tag)
                f.seek(0)
                f.write("\n".join(lines))
                f.truncate()
                return True
    except Exception as e:
        print(f"An error occurred: {e}")
        return None
        
# The file path where the history of found CVE dates is saved
tag_file_path = 'last_tags.txt'

counter = -1
def increase_counter():
    global counter
    counter += 1
    return counter
    
# Function for checking vulnerabilities on CVEdetails.com
def find_vulnerability_cvedetailscom(url, product_name):
    increase_counter()
    try:
        page = requests.get(url, headers=headers)
        page.raise_for_status()
        soup = BeautifulSoup(page.text, 'lxml')
        div_tags = soup.find_all('div', class_='col-6', attrs={'data-tsvfield': 'publishDate'})
    
        for div in div_tags:
            div_text = div.text.strip()
            if yesterday_date in div_text or today_date in div_text:
                if check_last_tags(div_text):
                    print(f"> New vulnerabilities found for: {product_name} - Link to the page: [ {url} ]")
                    break
                else:
                    print(f"- No vulnerabilities found for: {product_name}")
                    break
            else:
                print(f"- No vulnerabilities found for: {product_name}")
                break
    except Exception as e:
        print(f"- Failed to open the page: [ {url} ]. Error: ‘{e}'")

# Vulnerability search       
find_vulnerability_cvedetailscom("https://www.cvedetails.com/vulnerability-list/vendor_id-26/Microsoft.html?page=1&order=7", "Microsoft") # Remember, the parameter &order=7 ensures that CVEs are displayed sorted by ‘Publish Date’. It is necessary for the script to work correctly
find_vulnerability_cvedetailscom("https://www.cvedetails.com/vulnerability-list/vendor_id-16/Cisco.html?page=1&order=7", "Cisco")
find_vulnerability_cvedetailscom("https://www.cvedetails.com/vulnerability-list/vendor_id-12126/Amazon.html?page=1&cvssscoremin=9&order=7", "Amazon") # The parameter &cvssscoremin=9 ensures that only vulnerabilities with a CVSS score higher than 9 are displayed; you can enter any number here, even non-integer values like 5.5

# Above, I have presented only three links out of the vast number of possibilities for checking CVEs from various vendors and products on CVEdetails.com. Visit the original CVEdetails.com website to see if they include the specific products your company uses
